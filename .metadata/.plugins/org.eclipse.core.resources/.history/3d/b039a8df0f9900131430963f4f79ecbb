package servers;

import org.omg.CORBA.ORB;
import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;
import org.omg.PortableServer.POAManagerPackage.AdapterInactive;
import org.omg.PortableServer.POAPackage.ServantAlreadyActive;
import org.omg.PortableServer.POAPackage.ObjectNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;

import java.util.*;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.net.*;

import java.io.IOException; 
import java.io.FileNotFoundException;
import java.io.PrintWriter;


/*
 * This is the GameServer class which implements the GameServerRMI interface
 * @author Mehrdad Dehdashti
 */
public class GameServer implements GameServerRMI, Runnable
{	
	private String aServerName;
	private int aRMIPort; //RMI port
	private int aUDPPort;
	private String aGeoLocation;
	private Remote aRemoteObj;
	private Hashtable<String, List<Account>> database;
	private Logger log;
	
	// The RMI Registry
	private static Registry registry;
	
	// Main Method
	public static void main(String[] args)
	{
		try {
			registry = LocateRegistry.createRegistry(DPSS.RMIport);
		} catch (RemoteException e) {
			System.out.println("Failed to create Registry : " + e.getMessage());
		}
		new Thread(new GameServer("NA", DPSS.GeoLocationOfGameServerNA, DPSS.RMIport, DPSS.UDPportNA)).start();
		new Thread(new GameServer("EU", DPSS.GeoLocationOfGameServerEU, DPSS.RMIport, DPSS.UDPportEU)).start();
		new Thread(new GameServer("AS", DPSS.GeoLocationOfGameServerAS, DPSS.RMIport, DPSS.UDPportAS)).start();
	}
	
	/**
	 * Constructor of GameServer
	 * @param pServerName
	 */
	public GameServer(String pServerName,  String pGeoLocation, int pRMIPort, int pUDPPort)
	{
		aServerName = pServerName;
		aRMIPort = pRMIPort;
		aUDPPort = pUDPPort;
		aGeoLocation = pGeoLocation;
		createLog();
		database = new Hashtable<String, List<Account>>();
		for(char alphabet = 'A'; alphabet <= 'Z'; alphabet++)
		{
			database.put(String.valueOf(alphabet), new ArrayList <Account>());
		}
		log.info("Database initialized\n" + database.toString());
		registerRemoteObject();
	}
	
	// Creates the log file for this server
	private void createLog()
	{
		try {
			log = Logger.getLogger(aServerName);
			FileHandler fileHandler = new FileHandler(aServerName+".log");
			log.addHandler(fileHandler);
	        SimpleFormatter formatter = new SimpleFormatter();  
	        fileHandler.setFormatter(formatter);  
	        log.info("Log file created for GameServer " + aServerName + " with port number " + aRMIPort + "\n" +
	        		 "To connect to this server, the clients have to aquire IP address in form of " + aGeoLocation + ".xxx.xxx.xxx");
		} catch (SecurityException | IOException e) {
			log.info("Log File Error: " + e.getMessage());
		}
	}
	
	// Export Server and register remoteObj into the RMIRegistry (the unique name is aServerName)
	private void registerRemoteObject()
	{
		try {
			aRemoteObj = UnicastRemoteObject.exportObject(this, aRMIPort);
			registry.bind(aServerName, aRemoteObj);
			log.info("Remote Object registered into RMIRegistry");
		} catch (RemoteException e) {
			log.info("RemoteException: " + e.getMessage());
		} catch (AlreadyBoundException e) {
			log.info("AlreadyBoundException: " + e.getMessage());
		}
	}
	
	/**
	 *  Create the Datagram Socket and bind it to a local port then starts the UDP server
	 */
	public void run()
	{
		try {
			DatagramSocket datagramSocket = new DatagramSocket(aUDPPort);
			byte [] buffer = new byte [1000];
			DatagramPacket request;
			DatagramPacket reply;
			while(true)
			{
				request = new DatagramPacket(buffer, buffer.length);
				datagramSocket.receive(request);
				buffer = (aServerName + ": " + getNumberOfOnlinePlayer() + " online, " + getNumberOfOfflinePlayer() + " offline. ").getBytes();
				reply = new DatagramPacket(buffer, buffer.length, request.getAddress(), request.getPort());
				datagramSocket.send(reply);
			}
		} catch (SocketException e) {
			System.out.println("SocketException : " + e.getMessage());
		} catch (IOException e) {
			System.out.println("IOException : " + e.getMessage());
		}
	}
	
	

	@Override
	public String createPlayerAccount(String pFirstName, String pLastName, int pAge, 
			                          String pUsername, String pPassword, String pIPAddress) throws RemoteException 
	{
		if(pAge <= 0)
		{
			log.info("Error Creating Player Account : Invalid Age");
			return "Error Creating Player Account : Invalid Age";
		}
		if(pUsername.length() < 6)
		{
			log.info("Error Creating Player Account : Username has to be at least 6 characters");
			return "Error Creating Player Account : Username has to be at least 6 characters";
		}
		if(pUsername.length() > 15)
		{
			log.info("Error Creating Player Account : Username has to be at most 15 characters");
			return "Error Creating Player Account : Username has to be at most 15 characters";
		}
		if((pUsername.charAt(0) > 'Z' && pUsername.charAt(0) < 'a') || pUsername.charAt(0) < 'A' || pUsername.charAt(0) > 'z')
		{
			log.info("Error Creating Player Account : Username cannot start with " + pUsername.charAt(0));
			return "Error Creating Player Account : Username cannot start with " + pUsername.charAt(0);
		}
		if(getAccount(pUsername) != null)
		{
			log.info("Error Creating Player Account : Username " + pUsername + " Already Exists");
			return "Error Creating Player Account : Username " + pUsername + " Already Exists";
		}
		if(pPassword.length() < 6)
		{
			log.info("Error Creating Player Account : Password has to be at least 6 characters");
			return "Error Creating Player Account : Password has to be at least 6 characters";
		}
		if(!validate(pIPAddress))
		{
			log.info("Error Creating Player Account : Invalid IP-address");
			return "Error Creating Player Account : Invalid IP-address";
		}
		if(IPAddressExists(pIPAddress))
		{
			log.info("Error Creating Player Account : IP-address Already Exists");
			return "Error Creating Player Account : IP-address Already Exists";
		}
		
		List <Account> tmpList;
		tmpList = database.get(String.valueOf(pUsername.toUpperCase().charAt(0)));
		tmpList.add(new Account(pFirstName, pLastName, pAge, pUsername, pPassword, pIPAddress));
		
		log.info("Player Account created :\nFirstName \"" +  pFirstName +  "\", LastName \"" +  pLastName + 
				"\", Age \"" +  pAge +  "\", Username \"" +  pUsername +  "\", Password \"" + pPassword + "\", IP-address \"" + 
				pIPAddress + "\", Player is currently Offline");
		return "Player Account created :\nFirstName \"" +  pFirstName +  "\", LastName \"" +  pLastName + 
				"\", Age \"" +  pAge +  "\", Username \"" +  pUsername +  "\", Password \"" + pPassword + "\", IP-address \"" + 
				pIPAddress + "\", Player is currently Offline";
	}

	@Override
	public String playerSignIn(String pUsername, String pPassword, String pIPAddress) throws RemoteException 
	{
		if((pUsername.charAt(0) > 'Z' && pUsername.charAt(0) < 'a') || pUsername.charAt(0) < 'A' || pUsername.charAt(0) > 'z')
		{
			log.info("Error Player Sign in : Username cannot start with " + pUsername.charAt(0));
			return "Error Player Sign in : Username cannot start with " + pUsername.charAt(0);
		}
		Account tmpAccount = getAccount(pUsername);
		if(tmpAccount == null)
		{
			log.info("Error Player Sign in : Username Was Not Found");
			tmpAccount = null;
			return "Error Player Sign in : Username Was Not Found";
		}
		if(!tmpAccount.getPassword().equals(pPassword))
		{
			log.info("Error Player Sign in : Incorrect Password");
			tmpAccount = null;
			return "Error Player Sign in : Incorrect Password";
		}
		if(!validate(pIPAddress))
		{
			log.info("Error Player Sign in : Invalid IP-address");
			tmpAccount = null;
			return "Error Player Sign in : Invalid IP-address";
		}
		if(!tmpAccount.getIPAddress().equals(pIPAddress))
		{
			log.info("Error Player Sign in : Nonmatching IP-address");
			tmpAccount = null;
			return "Error Player Sign in : Nonmatching IP-address";
		}
		if(!tmpAccount.isOnline())
		{
			tmpAccount.setOnline(true);
			tmpAccount = null;
			log.info("Player Sign in : Player " +  pUsername + " Is Now Online");
			return "Player Sign in : Player " +  pUsername + " Is Now Online";
		}
		else
		{
			log.info("Error Player Sign in : Player " + pUsername + " Is Already Online");
			tmpAccount = null;
			return "Error Player Sign in : Player " + pUsername + " Is Already Online";
		}
	}

	@Override
	public String playerSignOut(String pUsername, String pIPAddress) throws RemoteException 
	{
		if((pUsername.charAt(0) > 'Z' && pUsername.charAt(0) < 'a') || pUsername.charAt(0) < 'A' || pUsername.charAt(0) > 'z')
		{
			log.info("Error Player Sign out : Username cannot start with " + pUsername.charAt(0));
			return "Error Player Sign out : Username cannot start with " + pUsername.charAt(0);
		}
		Account tmpAccount = getAccount(pUsername);
		if(tmpAccount == null)
		{
			log.info("Error Player Sign out : Username Was Not Found");
			tmpAccount = null;
			return "Error Player Sign out : Username Was Not Found";
		}
		if(!validate(pIPAddress))
		{
			log.info("Error Player Sign out : Invalid IP-address");
			tmpAccount = null;
			return "Error Player Sign out : Invalid IP-address";
		}
		if(!tmpAccount.getIPAddress().equals(pIPAddress))
		{
			log.info("Error Player Sign out : Nonmatching IP-address");
			tmpAccount = null;
			return "Error Player Sign out : Nonmatching IP-address";
		}
		if(tmpAccount.isOnline())
		{
			tmpAccount.setOnline(false);
			tmpAccount = null;
			log.info("Player Sign out : Player " +  pUsername + " Is Now Offline");
			return "Player Sign out : Player " +  pUsername + " Is Now Offline";
		}
		else
		{
			log.info("Error Player Sign out : Player " + pUsername + " Is Already Offline");
			tmpAccount = null;
			return "Error Player Sign out : Player " + pUsername + " Is Already Offline";
		}
	}

	@Override
	public String getPlayerStatus(String pAdminUsername, String pAdminPassword, String pIPAddress) throws RemoteException
	{
		if(!pAdminUsername.equals("Admin"))
		{
			log.info("Error Getting Player Status : Incorrect Administrator Username");
			return "Error Getting Player Status : Incorrect Administrator Username";
		}
		if(!pAdminPassword.equals("Admin"))
		{
			log.info("Error Getting Player Status : Incorrect Administrator Password");
			return "Error Getting Player Status : Incorrect Administrator Password";
		}
		if(!validate(pIPAddress))
		{
			log.info("Error Getting Player Status : Invalid IP-address");
			return "Error Getting Player Status : Invalid IP-address";
		}
		try {
			// Create a Datagram Socket and bind it to a local port
			DatagramSocket datagramSocket = new DatagramSocket();
			// Place data in byte array
			String data;
			byte [] message;
			InetAddress host = InetAddress.getByName("localhost");
			DatagramPacket request1;
			DatagramPacket request2;
			DatagramPacket reply1;
			DatagramPacket reply2;
			// Create a Datagram Packet to send the request to the server
			if(aUDPPort == DPSS.UDPportNA)
			{
				data = "NA";
				message = data.getBytes();
				request1 = new DatagramPacket(message, data.length(), host, DPSS.UDPportEU);
				request2 = new DatagramPacket(message, data.length(), host, DPSS.UDPportAS);
			}
			else if(aUDPPort == DPSS.UDPportEU)
			{
				data = "EU";
				message = data.getBytes();
				request1 = new DatagramPacket(message, data.length(), host, DPSS.UDPportNA);
				request2 = new DatagramPacket(message, data.length(), host, DPSS.UDPportAS);
			}
			else if(aUDPPort == DPSS.UDPportAS)
			{
				data = "AS";
				message = data.getBytes();
				request1 = new DatagramPacket(message, data.length(), host, DPSS.UDPportEU);
				request2 = new DatagramPacket(message, data.length(), host, DPSS.UDPportNA);
			}
			else
			{
				log.info("Error Getting Player Status : Invalid Port number");
				return "Error Getting Player Status : Invalid Port number";
			}
			datagramSocket.send(request1);
			message = new byte [1000];
			reply1 = new DatagramPacket(message, message.length);
			datagramSocket.receive(reply1);
			datagramSocket.send(request2);
			message = new byte [1000];
			reply2 = new DatagramPacket(message, message.length);
			datagramSocket.receive(reply2);
			log.info("Get Player Status : " + aServerName + ": " + getNumberOfOnlinePlayer() + " online, " + getNumberOfOfflinePlayer() + 
					" offline. \n" + new String(reply1.getData()) + "\n" + new String(reply2.getData()));
			return "Get Player Status : " + aServerName + ": " + getNumberOfOnlinePlayer() + " online, " + getNumberOfOfflinePlayer() + 
					" offline. \n" + new String(reply1.getData()) + "\n" + new String(reply2.getData());
			
		} catch (SocketException e) {
			System.out.println("SocketException : " + e.getMessage());
		} catch (IOException e) {
			System.out.println("IOException : " + e.getMessage());
		}
		
		log.info("Error Getting Player Status : Socket Excpetion");
		return "Error Getting Player Status : Socket Excpetion";
	}
	
	// returns the number of current online players in this server
	private int getNumberOfOnlinePlayer()
	{
		List <Account> tmpList;
		Enumeration<List<Account>> enumeration = database.elements();
		int numberOfOnlinePlayers = 0;
		while(enumeration.hasMoreElements())
		{
			tmpList = enumeration.nextElement();
			for (int index = 0; index < tmpList.size(); index++)
				if(tmpList.get(index).isOnline())
					numberOfOnlinePlayers++;
		}
		return numberOfOnlinePlayers;
	}
	
	// returns the number of current offline players in this server
	private int getNumberOfOfflinePlayer()
	{
		List <Account> tmpList;
		Enumeration<List<Account>> enumeration = database.elements();
		int numberOfOfflinePlayers = 0;
		while(enumeration.hasMoreElements())
		{
			tmpList = enumeration.nextElement();
			for (int index = 0; index < tmpList.size(); index++)
				if(!tmpList.get(index).isOnline())
					numberOfOfflinePlayers++;
		}
		return numberOfOfflinePlayers;
	}
	
	// Returns the account with the given pUsername, returns null if pUsername does not exist
	private Account getAccount(String pUsername)
	{
		String tmpUpperCaseUsername = pUsername.toUpperCase();
		List <Account> tmpList = database.get(String.valueOf(tmpUpperCaseUsername.charAt(0)));
		for (int index = 0; index < tmpList.size(); index++)
		{
			if(tmpList.get(index).getUserName().equals(pUsername))
			{
				tmpUpperCaseUsername = null;
				return tmpList.get(index);
			}
		}
		tmpUpperCaseUsername = null;
		tmpList = null;
		return null;
	}
	
	// Checks if the given pUsername exists in the database
	private boolean IPAddressExists(String pIPAddress)
	{
		List <Account> tmpList;
		Enumeration<List<Account>> enumeration = database.elements();
		while(enumeration.hasMoreElements())
		{
			tmpList = enumeration.nextElement();
			for (int index = 0; index < tmpList.size(); index++)
			{
				if(tmpList.get(index).getIPAddress().equals(pIPAddress))
				{
					tmpList = null;
					enumeration = null;
					return true;
				}
			}
		}
		tmpList = null;
		enumeration = null;
		return false;
	}
	
	// Checks for the validity of the given pIPAddress
	private static boolean validate(final String pIPAddress) 
	{          
	      Pattern pattern = Pattern.compile(DPSS.PATTERN_FOR_IPADDRESS_VALIDATION);
	      Matcher matcher = pattern.matcher(pIPAddress);
	      pattern = null;
	      return matcher.matches();             
	}
}
