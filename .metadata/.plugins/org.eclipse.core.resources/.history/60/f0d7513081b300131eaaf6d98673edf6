package servers;

public class GameServerEUProxy implements servers.GameServerEU {
  private String _endpoint = null;
  private servers.GameServerEU gameServerEU = null;
  
  public GameServerEUProxy() {
    _initGameServerEUProxy();
  }
  
  public GameServerEUProxy(String endpoint) {
    _endpoint = endpoint;
    _initGameServerEUProxy();
  }
  
  private void _initGameServerEUProxy() {
    try {
      gameServerEU = (new servers.GameServerEUServiceLocator()).getGameServerEU();
      if (gameServerEU != null) {
        if (_endpoint != null)
          ((javax.xml.rpc.Stub)gameServerEU)._setProperty("javax.xml.rpc.service.endpoint.address", _endpoint);
        else
          _endpoint = (String)((javax.xml.rpc.Stub)gameServerEU)._getProperty("javax.xml.rpc.service.endpoint.address");
      }
      
    }
    catch (javax.xml.rpc.ServiceException serviceException) {}
  }
  
  public String getEndpoint() {
    return _endpoint;
  }
  
  public void setEndpoint(String endpoint) {
    _endpoint = endpoint;
    if (gameServerEU != null)
      ((javax.xml.rpc.Stub)gameServerEU)._setProperty("javax.xml.rpc.service.endpoint.address", _endpoint);
    
  }
  
  public servers.GameServerEU getGameServerEU() {
    if (gameServerEU == null)
      _initGameServerEUProxy();
    return gameServerEU;
  }
  
  public java.lang.String method(int pValue) throws java.rmi.RemoteException{
    if (gameServerEU == null)
      _initGameServerEUProxy();
    return gameServerEU.method(pValue);
  }
  
  public java.lang.String createPlayerAccount(java.lang.String pFirstName, java.lang.String pLastName, int pAge, java.lang.String pUsername, java.lang.String pPassword, java.lang.String pIPAddress) throws java.rmi.RemoteException{
    if (gameServerEU == null)
      _initGameServerEUProxy();
    return gameServerEU.createPlayerAccount(pFirstName, pLastName, pAge, pUsername, pPassword, pIPAddress);
  }
  
  public java.lang.String playerSignOut(java.lang.String pUsername, java.lang.String pIPAddress) throws java.rmi.RemoteException{
    if (gameServerEU == null)
      _initGameServerEUProxy();
    return gameServerEU.playerSignOut(pUsername, pIPAddress);
  }
  
  public java.lang.String transferAccount(java.lang.String pUsername, java.lang.String pPassword, java.lang.String pOldIPAddress, java.lang.String pNewIPAddress) throws java.rmi.RemoteException{
    if (gameServerEU == null)
      _initGameServerEUProxy();
    return gameServerEU.transferAccount(pUsername, pPassword, pOldIPAddress, pNewIPAddress);
  }
  
  public java.lang.String getPlayerStatus(java.lang.String pAdminUsername, java.lang.String pAdminPassword, java.lang.String pIPAddress) throws java.rmi.RemoteException{
    if (gameServerEU == null)
      _initGameServerEUProxy();
    return gameServerEU.getPlayerStatus(pAdminUsername, pAdminPassword, pIPAddress);
  }
  
  public java.lang.String suspendAccount(java.lang.String pAdminUsername, java.lang.String pAdminPassword, java.lang.String pIPAddress, java.lang.String pUsernameToSuspend) throws java.rmi.RemoteException{
    if (gameServerEU == null)
      _initGameServerEUProxy();
    return gameServerEU.suspendAccount(pAdminUsername, pAdminPassword, pIPAddress, pUsernameToSuspend);
  }
  
  public java.lang.String playerSignIn(java.lang.String pUsername, java.lang.String pPassword, java.lang.String pIPAddress) throws java.rmi.RemoteException{
    if (gameServerEU == null)
      _initGameServerEUProxy();
    return gameServerEU.playerSignIn(pUsername, pPassword, pIPAddress);
  }
  
  
}