package clients;

import java.io.IOException;
import java.util.Scanner;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import org.omg.CORBA.ORB;
import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.PortableServer.POAManagerPackage.AdapterInactive;
import org.omg.PortableServer.POAPackage.ObjectNotActive;
import org.omg.PortableServer.POAPackage.ServantAlreadyActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;

import dpss.interfaceIDL;
import dpss.interfaceIDLHelper;


import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;

import system.Account;
import system.Parameters;

/*
 * This is the PlayerClient class which operates the player
 * @author Mehrdad Dehdashti
 */
public class PlayerClient extends Thread
{
	private Logger log;
	private Scanner scanner;
	private String input;
	private int inputAge;
	private int chosenOption = 0; // 1 = createPlayerAccout, 2 = playerSignIn, 3 = playerSignOut
	private int parameterCount = 0;
	private Account aTmpAccount; // Local Account
	// CORBA variables
	private BufferedReader bufferedReader;
	private ORB orb;
	private String stringORB;
	private interfaceIDL aInterfaceIDL;
	
	/**
	 * This method is used for running test cases
	 * @param pRunTerminal if this client should run the terminal
	 */
	public PlayerClient (String pName, String[] pArgs, boolean pRunTermial)
	{
		this.setName(pName);
		scanner = new Scanner(System.in);
		createLog();
		orb = ORB.init(pArgs, null);
		log.info("Client ORB init");
		this.start();
		if(pRunTermial)
			runTerminal();
	}
	
	/**
	 * Manual invocation of GameServer operation createPlayerAccount used for test cases 
	 */
	public void createPlayerAccount(String pFirstName, String pLastName, int pAge, 
            						String pUsername, String pPassword, String pIPAddress)
	{
		try 
		{
			if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 2 && pIPAddress.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else
			{
				log.info("Invalid GeoLocation");
				return;
			}
			log.info(aInterfaceIDL.createPlayerAccount(pFirstName, pLastName,
					pAge, pUsername, pPassword, pIPAddress));
		} catch (Exception e) {
			System.out.println("Exception: " + e.getMessage());
		}
	}
	
	/**
	 * Manual invocation of GameServer operation playerSignIn used for test cases 
	 */
	public void playerSignIn(String pUsername, String pPassword, String pIPAddress)
	{
		try 
		{
			if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 2 && pIPAddress.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else
			{
				log.info("Invalid GeoLocation");
				return;
			}
			log.info(aInterfaceIDL.playerSignIn(pUsername, pPassword, pIPAddress));
		} catch (Exception e) {
			System.out.println("Exception: " + e.getMessage());
		}
	}
	
	/**
	 * Manual invocation of GameServer operation playerSignOut used for test cases 
	 */
	public void playerSignOut(String pUsername, String pIPAddress)
	{
		try 
		{
			if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 2 && pIPAddress.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else
			{
				log.info("Invalid GeoLocation");
				return;
			}
			log.info(aInterfaceIDL.playerSignOut(pUsername, pIPAddress));
		} catch (Exception e) {
			System.out.println("Exception: " + e.getMessage());
		}
	}
	
	/**
	 * Manual invocation of GameServer operation playerSignOut used for test cases 
	 */
	public void transferAccount(String pUsername,  String pPassword, String pOldIPAddress, String pNewIPAddress)
	{
		try 
		{
			if(pOldIPAddress.length() >= 3 && pOldIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pOldIPAddress.length() >= 2 && pOldIPAddress.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pOldIPAddress.length() >= 3 && pOldIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else
			{
				log.info("Invalid GeoLocation");
				return;
			}
			String tmpString;
			String tmpLine = null;
			String[] lines = new String[5];
			int tmpIndex = 0;
			tmpString = aInterfaceIDL.transferAccount(pUsername, pPassword, pOldIPAddress, pNewIPAddress);
			BufferedReader bufReader = new BufferedReader(new StringReader(tmpString));
			while( (tmpLine = bufReader.readLine()) != null )
			{
				lines[tmpIndex] = tmpLine;
				tmpIndex++;
			}
			if(tmpString.equals("ERROR_TRANSFER_ACCOUNT"))
			{
				log.info("Error Transferring Account : removal faild");
			}
			else
			{
				log.info(lines[0]);
				Account tmpAccountTobeTransferred;
				tmpAccountTobeTransferred = new Account();
				tmpAccountTobeTransferred.setFirstName(lines[1]);
				tmpAccountTobeTransferred.setPassword(lines[2]);
				tmpAccountTobeTransferred.setAge(Integer.parseInt(lines[3]));
				tmpAccountTobeTransferred.setUserName(pUsername);
				tmpAccountTobeTransferred.setPassword(pPassword);
				tmpAccountTobeTransferred.setIPAddress(pNewIPAddress);
				createPlayerAccount(tmpAccountTobeTransferred.getFirstName(), tmpAccountTobeTransferred.getLastName(), tmpAccountTobeTransferred.getAge(),
						tmpAccountTobeTransferred.getUserName(), tmpAccountTobeTransferred.getPassword(), tmpAccountTobeTransferred.getIPAddress());
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.getMessage());
		}
	}
	
	public void runConcurrencyTest()
	
	/**
	 * This method starts the client with fully implemented prompt functionality
	 */
	public void runTerminal ()
	{	
		aTmpAccount = new Account();
		try {
			while(true)
			{
				switch(chosenOption)
				{
					case 0:
						System.out.println("Choose a following option :\n1 - Create Player Account\n2 - Player Sign In\n3 - Player Sign Out");
						input = scanner.nextLine();
						try {
							chosenOption = Integer.parseInt(input);
							if(chosenOption < 0 || chosenOption > 3)
							{
								chosenOption = 0;
								System.out.println("Invalid Input\n");
							}
						} catch(NumberFormatException e) {
							System.out.println("Invalid Input");
							chosenOption = 0;
						}
						break;
						
					case 1: // createPlayerAccount
						switch(parameterCount)
						{
						case 0:
							System.out.print("Insert FirstName : ");
							input = scanner.nextLine();
							aTmpAccount.setFirstName(input);
							parameterCount++;
							break;
						case 1:
							System.out.print("Insert LastName : ");
							input = scanner.nextLine();
							aTmpAccount.setLastName(input);
							parameterCount++;
							break;
						case 2:
							System.out.print("Insert Age : ");
							input = scanner.nextLine();
							try {
								inputAge = Integer.parseInt(input);
							} catch(NumberFormatException e) {
								System.out.println("Invalid Input");
								break;
							}
							aTmpAccount.setAge(inputAge);
							parameterCount++;
							break;
						case 3:
							System.out.print("Insert Username : ");
							input = scanner.nextLine();
							aTmpAccount.setUserName(input);
							parameterCount++;
							break;
						case 4:
							System.out.print("Insert Password : ");
							input = scanner.nextLine();
							aTmpAccount.setPassword(input);
							parameterCount++;
							break;
						case 5:
							System.out.print("Insert IP-address : ");
							input = scanner.nextLine();
							aTmpAccount.setIPAddress(input);
							if(input.length() >= 3 && input.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
							{
								// Get the reference to the CORBA object from the file
								bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
								stringORB = bufferedReader.readLine();
								bufferedReader.close();
								// Transform the reference string to CORBA object
								org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
								aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
							}
							else if(input.length() >= 2 && input.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
							{
								// Get the reference to the CORBA object from the file
								bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
								stringORB = bufferedReader.readLine();
								bufferedReader.close();
								// Transform the reference string to CORBA object
								org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
								aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
							}
							else if(input.length() >= 3 && input.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
							{
								// Get the reference to the CORBA object from the file
								bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
								stringORB = bufferedReader.readLine();
								bufferedReader.close();
								// Transform the reference string to CORBA object
								org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
								aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
							}
							else
							{
								log.info("Invalid GeoLocation");
								break;
							}
							log.info(aInterfaceIDL.createPlayerAccount(aTmpAccount.getFirstName(), aTmpAccount.getLastName(),
																aTmpAccount.getAge(), aTmpAccount.getUserName(), 
																aTmpAccount.getPassword(), aTmpAccount.getIPAddress()));
							parameterCount = 0;
							chosenOption = 0;
							break;
						}
						break;
						
					case 2: // playerSignIn
						switch(parameterCount)
						{
						case 0:
							System.out.print("Insert Username : ");
							input = scanner.nextLine();
							aTmpAccount.setUserName(input);
							parameterCount++;
							break;
						case 1:
							System.out.print("Insert Password : ");
							input = scanner.nextLine();
							aTmpAccount.setPassword(input);
							parameterCount++;
							break;
						case 2:
							System.out.print("Insert IP-address : ");
							input = scanner.nextLine();
							aTmpAccount.setIPAddress(input);
							if(input.length() >= 3 && input.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
							{
								// Get the reference to the CORBA object from the file
								bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
								stringORB = bufferedReader.readLine();
								bufferedReader.close();
								// Transform the reference string to CORBA object
								org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
								aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
							}
							else if(input.length() >= 2 && input.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
							{
								// Get the reference to the CORBA object from the file
								bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
								stringORB = bufferedReader.readLine();
								bufferedReader.close();
								// Transform the reference string to CORBA object
								org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
								aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
							}
							else if(input.length() >= 3 && input.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
							{
								// Get the reference to the CORBA object from the file
								bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
								stringORB = bufferedReader.readLine();
								bufferedReader.close();
								// Transform the reference string to CORBA object
								org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
								aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
							}
							else
							{
								log.info("Invalid GeoLocation");
								break;
							}
							log.info(aInterfaceIDL.playerSignIn(aTmpAccount.getUserName(), aTmpAccount.getPassword(), aTmpAccount.getIPAddress()));
							parameterCount = 0;
							chosenOption = 0;
							break;
						}
						break;
						
					case 3: // playerSignIn
						switch(parameterCount)
						{
						case 0:
							System.out.print("Insert Username :");
							input = scanner.nextLine();
							aTmpAccount.setUserName(input);
							parameterCount++;
							break;
						case 1:
							System.out.print("Insert IP-address :");
							input = scanner.nextLine();
							aTmpAccount.setIPAddress(input);
							if(input.length() >= 3 && input.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
							{
								// Get the reference to the CORBA object from the file
								bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
								stringORB = bufferedReader.readLine();
								bufferedReader.close();
								// Transform the reference string to CORBA object
								org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
								aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
							}
							else if(input.length() >= 2 && input.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
							{
								// Get the reference to the CORBA object from the file
								bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
								stringORB = bufferedReader.readLine();
								bufferedReader.close();
								// Transform the reference string to CORBA object
								org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
								aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
							}
							else if(input.length() >= 3 && input.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
							{
								// Get the reference to the CORBA object from the file
								bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
								stringORB = bufferedReader.readLine();
								bufferedReader.close();
								// Transform the reference string to CORBA object
								org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
								aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
							}
							else
							{
								log.info("Invalid GeoLocation");
								break;
							}
							log.info(aInterfaceIDL.playerSignOut(aTmpAccount.getUserName(), aTmpAccount.getIPAddress()));
							parameterCount = 0;
							chosenOption = 0;
							break;
						}
						break;
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.getMessage());
		}
	}
	
	// Creates the log file for this Player
	private void createLog()
	{
		try {
			log = Logger.getLogger(this.getName());
			FileHandler fileHandler = new FileHandler(this.getName() + ".log");
			log.addHandler(fileHandler);
	        SimpleFormatter formatter = new SimpleFormatter();  
	        fileHandler.setFormatter(formatter);
	        log.info("Log file created for PlayerClient");
		} catch (SecurityException | IOException e) {
			log.info("Log File Error: " + e.getMessage());
		}
	}

}

