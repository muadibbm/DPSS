package clients;

import org.omg.CORBA.ORB;

import dpss.interfaceIDL;
import dpss.interfaceIDLHelper;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import system.Account;
import system.Parameters;

/*
 * This is the AdministratorClient class which operates the administrator
 * @author Mehrdad Dehdashti
 */
public class AdministratorClient extends Thread
{
	private Logger log;
	private Scanner scanner;
	private String input;
	private int parameterCount = 0;
	private Account aTmpAccount; // Local Account
	// CORBA variables
	private BufferedReader bufferedReader;
	private ORB orb;
	private String stringORB;
	private interfaceIDL aInterfaceIDL;
	
	/**
	 * This method is used for running test cases
	 */
	public AdministratorClient (String pName, String[] pArgs)
	{
		this.setName(pName);
		scanner = new Scanner(System.in);
		createLog();
		orb = ORB.init(pArgs, null);
		log.info("Client ORB init");
		this.start();
	}
	
	/**
	 * Manual invocation of GameServer operation getPlayerStatus used for test cases 
	 */
	public void getPlayerStatus(String pAdminUsername, String pAdminPassword, String pIPAddress)
	{
		try 
		{
			if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 2 && pIPAddress.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else
			{
				log.info("Invalid GeoLocation");
				return;
			}
			log.info(aInterfaceIDL.getPlayerStatus(pAdminUsername, pAdminPassword, pIPAddress));
		} catch (Exception e) {
			System.out.println("Exception: " + e.getMessage());
		}
	}
	
	/**
	 * Manual invocation of GameServer operation suspendAccount used for test cases 
	 */
	public void suspendAccount(String pAdminUsername, String pAdminPassword, String pIPAddress, String pUsernameToSuspend)
	{
		try 
		{
			if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 2 && pIPAddress.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
			{
				// Get the reference to the CORBA object from the file
				bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
				stringORB = bufferedReader.readLine();
				bufferedReader.close();
				// Transform the reference string to CORBA object
				org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
				aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
			}
			else
			{
				log.info("Invalid GeoLocation");
				return;
			}
			log.info(aInterfaceIDL.getPlayerStatus(pAdminUsername, pAdminPassword, pIPAddress));
		} catch (Exception e) {
			System.out.println("Exception: " + e.getMessage());
		}
	}
	
	/**
	 * This method starts the administrator with fully implemented prompt functionality
	 */
	public void runTerminal () 
	{
		aTmpAccount = new Account();
		try {
			while(true)
			{
				switch(parameterCount)
				{
				case 0:
					System.out.print("Insert Username :");
					input = scanner.nextLine();
					aTmpAccount.setUserName(input);
					parameterCount++;
					break;
				case 1:
					System.out.print("Insert Password :");
					input = scanner.nextLine();
					aTmpAccount.setPassword(input);
					parameterCount++;
					break;
				case 2:
					System.out.print("Insert IP-address :");
					input = scanner.nextLine();
					aTmpAccount.setIPAddress(input);
					if(input.length() >= 3 && input.substring(0,3).equals(Parameters.GeoLocationOfGameServerNA))
					{
						// Get the reference to the CORBA object from the file
						bufferedReader = new BufferedReader(new FileReader("NA_IOR.txt"));
						stringORB = bufferedReader.readLine();
						bufferedReader.close();
						// Transform the reference string to CORBA object
						org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
						aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
					}
					else if(input.length() >= 2 && input.substring(0,2).equals(Parameters.GeoLocationOfGameServerEU))
					{
						// Get the reference to the CORBA object from the file
						bufferedReader = new BufferedReader(new FileReader("EU_IOR.txt"));
						stringORB = bufferedReader.readLine();
						bufferedReader.close();
						// Transform the reference string to CORBA object
						org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
						aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
					}
					else if(input.length() >= 3 && input.substring(0,3).equals(Parameters.GeoLocationOfGameServerAS))
					{
						// Get the reference to the CORBA object from the file
						bufferedReader = new BufferedReader(new FileReader("AS_IOR.txt"));
						stringORB = bufferedReader.readLine();
						bufferedReader.close();
						// Transform the reference string to CORBA object
						org.omg.CORBA.Object reference_CORBA = orb.string_to_object(stringORB);
						aInterfaceIDL = interfaceIDLHelper.narrow(reference_CORBA);
					}
					else
					{
						log.info("Invalid GeoLocation");
						break;
					}
					log.info(aInterfaceIDL.getPlayerStatus(aTmpAccount.getUserName(), aTmpAccount.getPassword(), aTmpAccount.getIPAddress()));
					parameterCount = 0;
					break;
				}
			}
			
		} catch (Exception e) {
			System.out.println("Exception: " + e.getMessage());
		}
	}

	// Creates the log file for this Player
	private void createLog()
	{
		try {
			log = Logger.getLogger(this.getName());
			FileHandler fileHandler = new FileHandler(this.getName() + ".log");
			log.addHandler(fileHandler);
	        SimpleFormatter formatter = new SimpleFormatter();  
	        fileHandler.setFormatter(formatter);
	        log.info("Log file created for PlayerClient");
		} catch (SecurityException | IOException e) {
			log.info("Log File Error: " + e.getMessage());
		}
	}
}
