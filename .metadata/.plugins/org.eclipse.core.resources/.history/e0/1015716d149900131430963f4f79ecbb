package clients;

import java.io.IOException; 
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RMISecurityManager;
import java.rmi.RemoteException;
import java.util.Scanner;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import system.Account;

/*
 * This is the PlayerClient class which operates the player
 * @author Mehrdad Dehdashti
 */
public class PlayerClient extends Thread
{
	private Logger log;
	private Scanner scanner;
	private String input;
	private int inputAge;
	private int chosenOption = 0; // 1 = createPlayerAccout, 2 = playerSignIn, 3 = playerSignOut
	private int parameterCount = 0;
	private Account aTmpAccount; // Local Account
	
	// Main Method
	public static void main (String [] args)
	{
		/*
		// ADMINISTRATOR TEST CASES
		AdministratorClient admin1 = new AdministratorClient("ClientAdmin1");
		AdministratorClient admin2 = new AdministratorClient("ClientAdmin2");
		AdministratorClient admin3 = new AdministratorClient("ClientAdmin3");
		// PLAYER TEST CASES
		PlayerClient player1 = new PlayerClient("ClientPlayer1");
		PlayerClient player2 = new PlayerClient("ClientPlayer2");
		PlayerClient player3 = new PlayerClient("ClientPlayer3");
		PlayerClient player4 = new PlayerClient("ClientPlayer4");
		PlayerClient player5 = new PlayerClient("ClientPlayer5");
		PlayerClient player6 = new PlayerClient("ClientPlayer6");
		// TEST CASE 1 : createPlayerAccount
		player1.createPlayerAccount("David", "Copperfield", 14, "David14", "DifficultPassword", "132.192.168.1");
		player2.createPlayerAccount("John", "Smith", 50, "LittleJohn", "xxxxxxxxxx", "132.193.150.1");
		player3.createPlayerAccount("Sebastian", "Blood", 36, "Blood36", "1234567890", "132.198.177.2");
		player4.createPlayerAccount("Bruce", "Wayne", 34, "Batman", "DarkKnight", "93.100.100.100");
		player5.createPlayerAccount("noFirstName", "noLastName", 34, "JokerIsAwesome", "KillDarkKnight", "182.192.168.5");
		player6.createPlayerAccount("Clark", "Kent", 38, "Superman", "Cryptonyte", "182.192.100.1");
		// TEST CASE 2 : Existing Username in a server
		player1.createPlayerAccount("Sam", "Tully", 26, "Player1", "badPassword", "132.192.168.3");
		// TEST CASE 3 : Invalid Username
		player1.createPlayerAccount("Sam", "Tully", 26, "P", "badPassword", "132.192.168.3");
		// TEST CASE 4 : Invalid GeoLocation
		player1.createPlayerAccount("Sam", "Tully", 26, "smartPlayer", "badPassword", "111.132.222.102");
		// TEST CASE 5 : Invalid IP-address
		player1.createPlayerAccount("Sam", "Tully", 26, "smartPlayer", "badPassword", "132.1323211");
		// TEST CASE 6 : Invalid Password
		player1.createPlayerAccount("Sam", "Tully", 26, "smartPlayer", "p", "132.192.168.3");
		// TEST CASE 7 : playerSignIn
		player1.playerSignIn("David14", "DifficultPassword", "132.192.168.1");
		player2.playerSignIn("LittleJohn", "xxxxxxxxxx", "132.193.150.1");
		player3.playerSignIn("Blood36", "1234567890", "132.198.177.2");
		player4.playerSignIn("Batman", "DarkKnight", "93.100.100.100");
		player5.playerSignIn("JokerIsAwesome", "KillDarkKnight", "182.192.168.5");
		player6.playerSignIn("Superman", "Cryptonyte", "182.192.100.1");
		// TEST CASE 8 : playerSignIn when player is online
		player1.playerSignIn("David14", "DifficultPassword", "132.192.168.1");
		// TEST CASE 9 : playerSignIn when account does not exist
		player1.playerSignIn("Somebody", "DifficultPassword", "132.192.168.1");
		// TEST CASE 10 : playerSignOut
		player1.playerSignOut("David14", "132.192.168.1");
		player3.playerSignOut("Blood36", "132.198.177.2");
		player5.playerSignOut("JokerIsAwesome", "182.192.168.5");
		// TEST CASE 11 : getPlayerStatus
		admin1.getPlayerStatus("Admin", "Admin", "132.192.169.20");
		admin2.getPlayerStatus("Admin", "Admin", "93.192.169.20");
		admin3.getPlayerStatus("Admin", "Admin", "182.192.169.20");
		// TEST CASE 12 : playerSignOut when player is Offline
		player1.playerSignOut("David14", "132.192.168.1");
		// TEST CASE 13 : playerSignOut Concurrency
		player1.playerSignOut("LittleJohn", "132.193.150.1");
		player2.playerSignOut("LittleJohn", "132.193.150.1");
		// START TERMINAL
		player1.runTerminal(); */
	}
	
	/**
	 * This method is used for running test cases
	 */
	public PlayerClient (String pName)
	{
		this.setName(pName);
		scanner = new Scanner(System.in);
		createLog();
		System.setSecurityManager(new RMISecurityManager());
		this.start();
	}
	
	/**
	 * Manual invocation of GameServer operation createPlayerAccount used for test cases 
	 */
	public void createPlayerAccount(String pFirstName, String pLastName, int pAge, 
            						String pUsername, String pPassword, String pIPAddress)
	{
		try 
		{
			if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(DPSS.GeoLocationOfGameServerNA))
			{
				//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/NA");
			}
			else if(pIPAddress.length() >= 2 && pIPAddress.substring(0,2).equals(DPSS.GeoLocationOfGameServerEU))
			{
				//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/EU");
			}
			else if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(DPSS.GeoLocationOfGameServerAS))
			{
				//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/AS");
			}
			else
			{
				log.info("Invalid GeoLocation");
				return;
			}
			/*log.info(gameServerStub.createPlayerAccount(pFirstName, pLastName,
					pAge, pUsername, pPassword, pIPAddress));*/
		} catch (MalformedURLException e) {
			System.out.println("MalformedURLException: " + e.getMessage());
		} catch (RemoteException e) {
			System.out.println("RemoteException: " + e.getMessage());
		} catch (NotBoundException e) {
			System.out.println("NotBoundException: " + e.getMessage());
		}
	}
	
	/**
	 * Manual invocation of GameServer operation playerSignIn used for test cases 
	 */
	public void playerSignIn(String pUsername, String pPassword, String pIPAddress)
	{
		try 
		{
			if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(DPSS.GeoLocationOfGameServerNA))
			{
				//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/NA");
			}
			else if(pIPAddress.length() >= 2 && pIPAddress.substring(0,2).equals(DPSS.GeoLocationOfGameServerEU))
			{
				//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/EU");
			}
			else if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(DPSS.GeoLocationOfGameServerAS))
			{
				//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/AS");
			}
			else
			{
				log.info("Invalid GeoLocation");
				return;
			}
			//log.info(gameServerStub.playerSignIn(pUsername, pPassword, pIPAddress));
		} catch (MalformedURLException e) {
			System.out.println("MalformedURLException: " + e.getMessage());
		} catch (RemoteException e) {
			System.out.println("RemoteException: " + e.getMessage());
		} catch (NotBoundException e) {
			System.out.println("NotBoundException: " + e.getMessage());
		}
	}
	
	/**
	 * Manual invocation of GameServer operation playerSignOut used for test cases 
	 */
	public void playerSignOut(String pUsername, String pIPAddress)
	{
		try 
		{
			if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(DPSS.GeoLocationOfGameServerNA))
			{
				//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/NA");
			}
			else if(pIPAddress.length() >= 2 && pIPAddress.substring(0,2).equals(DPSS.GeoLocationOfGameServerEU))
			{
				//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/EU");
			}
			else if(pIPAddress.length() >= 3 && pIPAddress.substring(0,3).equals(DPSS.GeoLocationOfGameServerAS))
			{
				//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/AS");
			}
			else
			{
				log.info("Invalid GeoLocation");
				return;
			}
			//log.info(gameServerStub.playerSignOut(pUsername, pIPAddress));
		} catch (MalformedURLException e) {
			System.out.println("MalformedURLException: " + e.getMessage());
		} catch (RemoteException e) {
			System.out.println("RemoteException: " + e.getMessage());
		} catch (NotBoundException e) {
			System.out.println("NotBoundException: " + e.getMessage());
		}
	}
	
	/**
	 * This method starts the client with fully implemented prompt functionality
	 */
	public void runTerminal ()
	{	
		aTmpAccount = new Account();
		try {
			while(true)
			{
				switch(chosenOption)
				{
					case 0:
						System.out.println("Choose a following option :\n1 - Create Player Account\n2 - Player Sign In\n3 - Player Sign Out");
						input = scanner.nextLine();
						try {
							chosenOption = Integer.parseInt(input);
							if(chosenOption < 0 || chosenOption > 3)
							{
								chosenOption = 0;
								System.out.println("Invalid Input\n");
							}
						} catch(NumberFormatException e) {
							System.out.println("Invalid Input");
							chosenOption = 0;
						}
						break;
						
					case 1: // createPlayerAccount
						switch(parameterCount)
						{
						case 0:
							System.out.print("Insert FirstName : ");
							input = scanner.nextLine();
							aTmpAccount.setFirstName(input);
							parameterCount++;
							break;
						case 1:
							System.out.print("Insert LastName : ");
							input = scanner.nextLine();
							aTmpAccount.setLastName(input);
							parameterCount++;
							break;
						case 2:
							System.out.print("Insert Age : ");
							input = scanner.nextLine();
							try {
								inputAge = Integer.parseInt(input);
							} catch(NumberFormatException e) {
								System.out.println("Invalid Input");
								break;
							}
							aTmpAccount.setAge(inputAge);
							parameterCount++;
							break;
						case 3:
							System.out.print("Insert Username : ");
							input = scanner.nextLine();
							aTmpAccount.setUserName(input);
							parameterCount++;
							break;
						case 4:
							System.out.print("Insert Password : ");
							input = scanner.nextLine();
							aTmpAccount.setPassword(input);
							parameterCount++;
							break;
						case 5:
							System.out.print("Insert IP-address : ");
							input = scanner.nextLine();
							aTmpAccount.setIPAddress(input);
							if(input.length() >= 3 && input.substring(0,3).equals(DPSS.GeoLocationOfGameServerNA))
							{
								//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/NA");
							}
							else if(input.length() >= 2 && input.substring(0,2).equals(DPSS.GeoLocationOfGameServerEU))
							{
								//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/EU");
							}
							else if(input.length() >= 3 && input.substring(0,3).equals(DPSS.GeoLocationOfGameServerAS))
							{
								//gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/AS");
							}
							else
							{
								log.info("Invalid GeoLocation");
								break;
							}
							/*log.info(gameServerStub.createPlayerAccount(aTmpAccount.getFirstName(), aTmpAccount.getLastName(),
																aTmpAccount.getAge(), aTmpAccount.getUserName(), 
																aTmpAccount.getPassword(), aTmpAccount.getIPAddress()));*/
							parameterCount = 0;
							chosenOption = 0;
							break;
						}
						break;
						
					case 2: // playerSignIn
						switch(parameterCount)
						{
						case 0:
							System.out.print("Insert Username : ");
							input = scanner.nextLine();
							aTmpAccount.setUserName(input);
							parameterCount++;
							break;
						case 1:
							System.out.print("Insert Password : ");
							input = scanner.nextLine();
							aTmpAccount.setPassword(input);
							parameterCount++;
							break;
						case 2:
							System.out.print("Insert IP-address : ");
							input = scanner.nextLine();
							aTmpAccount.setIPAddress(input);
							if(input.length() >= 3 && input.substring(0,3).equals(DPSS.GeoLocationOfGameServerNA))
							{
								gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/NA");
							}
							else if(input.length() >= 2 && input.substring(0,2).equals(DPSS.GeoLocationOfGameServerEU))
							{
								gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/EU");
							}
							else if(input.length() >= 3 && input.substring(0,3).equals(DPSS.GeoLocationOfGameServerAS))
							{
								gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/AS");
							}
							else
							{
								log.info("Invalid GeoLocation");
								break;
							}
							log.info(gameServerStub.playerSignIn(aTmpAccount.getUserName(), aTmpAccount.getPassword(), aTmpAccount.getIPAddress()));
							parameterCount = 0;
							chosenOption = 0;
							break;
						}
						break;
						
					case 3: // playerSignIn
						switch(parameterCount)
						{
						case 0:
							System.out.print("Insert Username :");
							input = scanner.nextLine();
							aTmpAccount.setUserName(input);
							parameterCount++;
							break;
						case 1:
							System.out.print("Insert IP-address :");
							input = scanner.nextLine();
							aTmpAccount.setIPAddress(input);
							if(input.length() >= 3 && input.substring(0,3).equals(DPSS.GeoLocationOfGameServerNA))
							{
								gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/NA");
							}
							else if(input.length() >= 2 && input.substring(0,2).equals(DPSS.GeoLocationOfGameServerEU))
							{
								gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/EU");
							}
							else if(input.length() >= 3 && input.substring(0,3).equals(DPSS.GeoLocationOfGameServerAS))
							{
								gameServerStub = (GameServerRMI) Naming.lookup("rmi://localhost:"+DPSS.RMIport+"/AS");
							}
							else
							{
								log.info("Invalid GeoLocation");
								break;
							}
							log.info(gameServerStub.playerSignOut(aTmpAccount.getUserName(), aTmpAccount.getIPAddress()));
							parameterCount = 0;
							chosenOption = 0;
							break;
						}
						break;
				}
			}
		} catch (MalformedURLException e) {
			System.out.println("MalformedURLException: " + e.getMessage());
		} catch (RemoteException e) {
			System.out.println("RemoteException: " + e.getMessage());
		} catch (NotBoundException e) {
			System.out.println("NotBoundException: " + e.getMessage());
		}
	}
	
	// Creates the log file for this Player
	private void createLog()
	{
		try {
			log = Logger.getLogger(this.getName());
			FileHandler fileHandler = new FileHandler(this.getName() + ".log");
			log.addHandler(fileHandler);
	        SimpleFormatter formatter = new SimpleFormatter();  
	        fileHandler.setFormatter(formatter);
	        log.info("Log file created for PlayerClient");
		} catch (SecurityException | IOException e) {
			log.info("Log File Error: " + e.getMessage());
		}
	}

}

