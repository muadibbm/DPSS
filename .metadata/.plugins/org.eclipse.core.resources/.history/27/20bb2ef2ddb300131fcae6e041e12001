

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.List;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import system.Account;
import system.Parameters;
import system.PersistentHashtable;

public class GameServerAS 
{
	private String aServerName;
	private int aUDPPort;
	private String aGeoLocation;
	private PersistentHashtable database;
	private Logger log;
	private UDPThread aUDPThread; 
	
	public GameServerAS()
	{
		aServerName = "AS";
		aGeoLocation = Parameters.GeoLocationOfGameServerAS;
		aUDPPort = Parameters.UDPportAS;
		createLog();
		database = new PersistentHashtable("AS_PersistentHashtable");
		log.info("Database initialized\n" + database.toString());
		// run(); TODO
		createPlayerAccount("David","Tesla",24,"muadibbm","password","182.192.1.0");
		playerSignIn("muadibbm","password","182.192.1.0");
		playerSignOut("muadibbm","182.192.1.0");
		log.info(getAccount("muadibbm"));
	}
	
	// Creates the log file for this server
	private void createLog()
	{
		try {
			log = Logger.getLogger(aServerName);
			FileHandler fileHandler = new FileHandler(aServerName+".log");
			log.addHandler(fileHandler);
	        SimpleFormatter formatter = new SimpleFormatter();  
	        fileHandler.setFormatter(formatter);  
	        log.info("Log file created for GameServer " + aServerName +
	        		 "\nTo connect to this server, the clients have to aquire IP address in form of " + aGeoLocation + ".xxx.xxx.xxx");
		} catch (SecurityException | IOException e) {
			log.info("Log File Error: " + e.getMessage());
		}
	}
	
	/** Create the UDP and checks if the UDP thread crashes so it would replace it with a new UDP thread */
	private void run()
	{
		aUDPThread = new UDPThread(aServerName, aUDPPort);
		aUDPThread.start();
		log.info("UDP Running");
		while(true)
		{
			if(aUDPThread.crashed())
			{
				aUDPThread = new UDPThread(aServerName, aUDPPort);
				aUDPThread.start();
			}
			aUDPThread.setNumberOfPlayers(this.getNumberOfOnlinePlayer(), getNumberOfOfflinePlayer());
		}
	}
	
	/**
	 * This method when invoked from a PlayerClient will create a player account with the given parameters
	 * and returns the confirmation
	 * @param pFirstName
	 * @param pLastName
	 * @param pAge
	 * @param pUsername a minimum length of 6 characters and a maximum length of 15 characters
	 * @param pPassword a minimum length of 6 characters
	 * @param pIPAddress 132.xxx.xxx.xxx for NA, 93.xxx.xxx.xxx for EU, 182.xxx.xxx.xxx for AS
	 * @return confirmation in form of a string
	 */
	public String createPlayerAccount(String pFirstName, String pLastName, int pAge, 
			                          String pUsername, String pPassword, String pIPAddress) 
	{
		// TODO : add aGeolocation check
		if(pAge <= 0)
		{
			log.info("Error Creating Player Account : Invalid Age");
			return "Error Creating Player Account : Invalid Age";
		}
		if(pUsername.length() < 6)
		{
			log.info("Error Creating Player Account : Username has to be at least 6 characters");
			return "Error Creating Player Account : Username has to be at least 6 characters";
		}
		if(pUsername.length() > 15)
		{
			log.info("Error Creating Player Account : Username has to be at most 15 characters");
			return "Error Creating Player Account : Username has to be at most 15 characters";
		}
		if((pUsername.charAt(0) > 'Z' && pUsername.charAt(0) < 'a') || pUsername.charAt(0) < 'A' || pUsername.charAt(0) > 'z')
		{
			log.info("Error Creating Player Account : Username cannot start with " + pUsername.charAt(0));
			return "Error Creating Player Account : Username cannot start with " + pUsername.charAt(0);
		}
		if(getAccount(pUsername) != null)
		{
			log.info("Error Creating Player Account : Username " + pUsername + " Already Exists");
			return "Error Creating Player Account : Username " + pUsername + " Already Exists";
		}
		if(pPassword.length() < 6)
		{
			log.info("Error Creating Player Account : Password has to be at least 6 characters");
			return "Error Creating Player Account : Password has to be at least 6 characters";
		}
		if(!validate(pIPAddress))
		{
			log.info("Error Creating Player Account : Invalid IP-address");
			return "Error Creating Player Account : Invalid IP-address";
		}
		if(IPAddressExists(pIPAddress))
		{
			log.info("Error Creating Player Account : IP-address Already Exists");
			return "Error Creating Player Account : IP-address Already Exists";
		}
		
		database.put(String.valueOf(pUsername.toUpperCase().charAt(0)), new Account(pFirstName, pLastName, pAge, pUsername, pPassword, pIPAddress));

		log.info("Player Account created :\nFirstName \"" +  pFirstName +  "\", LastName \"" +  pLastName + 
				"\", Age \"" +  pAge +  "\", Username \"" +  pUsername +  "\", Password \"" + pPassword + "\", IP-address \"" + 
				pIPAddress + "\", Player is currently Offline");
		return "Player Account created :\nFirstName \"" +  pFirstName +  "\", LastName \"" +  pLastName + 
				"\", Age \"" +  pAge +  "\", Username \"" +  pUsername +  "\", Password \"" + pPassword + "\", IP-address \"" + 
				pIPAddress + "\", Player is currently Offline";
	}
	
	/**
	 * This method when invoked from a PlayerClient will set a player online if conditions are met 
	 * with the given parameters and returns the confirmation
	 * @param pUsername a minimum length of 6 characters and a maximum length of 15 characters
	 * @param pPassword a minimum length of 6 characters
	 * @param pIPAddress 132.xxx.xxx.xxx for NA, 93.xxx.xxx.xxx for EU, 182.xxx.xxx.xxx for AS
	 * @return confirmation in form of a string
	 */
	public String playerSignIn(String pUsername, String pPassword, String pIPAddress)
	{
		// TODO : add aGeolocation check
		if((pUsername.charAt(0) > 'Z' && pUsername.charAt(0) < 'a') || pUsername.charAt(0) < 'A' || pUsername.charAt(0) > 'z')
		{
			log.info("Error Player Sign in : Username cannot start with " + pUsername.charAt(0));
			return "Error Player Sign in : Username cannot start with " + pUsername.charAt(0);
		}
		Account tmpAccount = getAccount(pUsername);
		if(tmpAccount == null)
		{
			log.info("Error Player Sign in : Username Was Not Found");
			tmpAccount = null;
			return "Error Player Sign in : Username Was Not Found";
		}
		if(!tmpAccount.getPassword().equals(pPassword))
		{
			log.info("Error Player Sign in : Incorrect Password");
			tmpAccount = null;
			return "Error Player Sign in : Incorrect Password";
		}
		if(!validate(pIPAddress))
		{
			log.info("Error Player Sign in : Invalid IP-address");
			tmpAccount = null;
			return "Error Player Sign in : Invalid IP-address";
		}
		if(!tmpAccount.getIPAddress().equals(pIPAddress))
		{
			log.info("Error Player Sign in : Nonmatching IP-address");
			tmpAccount = null;
			return "Error Player Sign in : Nonmatching IP-address";
		}
		if(!tmpAccount.isOnline())
		{
			database.setOnline(true, pUsername);
			tmpAccount = null;
			log.info("Player Sign in : Player " +  pUsername + " Is Now Online");
			return "Player Sign in : Player " +  pUsername + " Is Now Online";
		}
		else
		{
			log.info("Error Player Sign in : Player " + pUsername + " Is Already Online");
			tmpAccount = null;
			return "Error Player Sign in : Player " + pUsername + " Is Already Online";
		}
	}
	
	/**
	 * This method when invoked from a PlayerClient will set this player off-line if conditions are met
	 * with the given parameters and returns the confirmation
	 * @param pUsername a minimum length of 6 characters and a maximum length of 15 characters
	 * @param pIPAddress 132.xxx.xxx.xxx for NA, 93.xxx.xxx.xxx for EU, 182.xxx.xxx.xxx for AS
	 * @return confirmation in form of a string
	 */
	public String playerSignOut(String pUsername, String pIPAddress) 
	{
		// TODO : add aGeolocation check
		if((pUsername.charAt(0) > 'Z' && pUsername.charAt(0) < 'a') || pUsername.charAt(0) < 'A' || pUsername.charAt(0) > 'z')
		{
			log.info("Error Player Sign out : Username cannot start with " + pUsername.charAt(0));
			return "Error Player Sign out : Username cannot start with " + pUsername.charAt(0);
		}
		Account tmpAccount = getAccount(pUsername);
		if(tmpAccount == null)
		{
			log.info("Error Player Sign out : Username Was Not Found");
			tmpAccount = null;
			return "Error Player Sign out : Username Was Not Found";
		}
		if(!validate(pIPAddress))
		{
			log.info("Error Player Sign out : Invalid IP-address");
			tmpAccount = null;
			return "Error Player Sign out : Invalid IP-address";
		}
		if(!tmpAccount.getIPAddress().equals(pIPAddress))
		{
			log.info("Error Player Sign out : Nonmatching IP-address");
			tmpAccount = null;
			return "Error Player Sign out : Nonmatching IP-address";
		}
		if(tmpAccount.isOnline())
		{
			database.setOnline(false, pUsername);
			tmpAccount = null;
			log.info("Player Sign out : Player " +  pUsername + " Is Now Offline");
			return "Player Sign out : Player " +  pUsername + " Is Now Offline";
		}
		else
		{
			log.info("Error Player Sign out : Player " + pUsername + " Is Already Offline");
			tmpAccount = null;
			return "Error Player Sign out : Player " + pUsername + " Is Already Offline";
		}
	}
	
	/**
	 * This method when invoked from a PlayerClient will transfer this player's account to the given server
	 * if conditions are met with the given parameters and returns the confirmation
	 * @param pUsername a minimum length of 6 characters and a maximum length of 15 characters
	 * @param pOldIPAddress 132.xxx.xxx.xxx for NA, 93.xxx.xxx.xxx for EU, 182.xxx.xxx.xxx for AS
	 * @param pNewIPAddress 132.xxx.xxx.xxx for NA, 93.xxx.xxx.xxx for EU, 182.xxx.xxx.xxx for AS
	 * @return confirmation in form of a string
	 */
	public String transferAccount(String pUsername, String pPassword, String pOldIPAddress, String pNewIPAddress) 
	{
		/*
		if((pUsername.charAt(0) > 'Z' && pUsername.charAt(0) < 'a') || pUsername.charAt(0) < 'A' || pUsername.charAt(0) > 'z')
		{
			log.info("Error Transferring Account : Username cannot start with " + pUsername.charAt(0));
			return "Error Transferring Account : Username cannot start with " + pUsername.charAt(0);
		}
		Account tmpAccount = getAccount(pUsername);
		if(tmpAccount == null)
		{
			log.info("Error Transferring Account : Username Was Not Found");
			tmpAccount = null;
			return "Error Transferring Account : Username Was Not Found";
		}
		if(!tmpAccount.getPassword().equals(pPassword))
		{
			log.info("Error Transferring Account : Incorrect Password");
			tmpAccount = null;
			return "Error Transferring Account : Incorrect Password";
		}
		if(!validate(pOldIPAddress))
		{
			log.info("Error Transferring Account : Invalid IP-address");
			tmpAccount = null;
			return "Error Transferring Account : Invalid IP-address";
		}
		if(!tmpAccount.getIPAddress().equals(pOldIPAddress))
		{
			log.info("Error Transferring Account : Nonmatching IP-address");
			tmpAccount = null;
			return "Error Transferring Account : Nonmatching IP-address";
		}
		if(!validate(pNewIPAddress))
		{
			log.info("Error Transferring Account : Invalid New IP-address");
			tmpAccount = null;
			return "Error Transferring Account : Invalid New IP-address";
		}
		
		boolean bSuccess = false;
		synchronized(this)
		{
			bSuccess = database.get(String.valueOf(pUsername.toUpperCase().charAt(0))).remove(tmpAccount);
		}		
		if(bSuccess)
		{
			log.info("Player Account deleted :\nUsername \"" +  pUsername +  "\", Password \"" + pPassword + "\", IP-address \"" + pOldIPAddress + "\"");
			return "Player Account deleted : Username \"" +  pUsername +  "\", Password \"" + pPassword + "\", IP-address \"" + pOldIPAddress + "\"\n" +
			tmpAccount.getFirstName() + "\n" + 
			tmpAccount.getLastName() + "\n" + 
			Integer.toString(tmpAccount.getAge());
		}
		else
		{
			log.info("Error Transferring Account : removal faild");
			return "ERROR_TRANSFER_ACCOUNT";
		}
		*/
		return "transferAccount";
	}
	
	/**
	 * This method when invoked from a AdministratorClient will return the number of players online and off-line
	 * @param pAdminUsername by default all administrators have username "Admin"
	 * @param pAdminPassword by default all administrators have password "Admin"
	 * @param pIPAddress 132.xxx.xxx.xxx for NA, 93.xxx.xxx.xxx for EU, 182.xxx.xxx.xxx for AS
	 * @return Confirmation in form of a string
	 */
	public String getPlayerStatus(String pAdminUsername, String pAdminPassword, String pIPAddress)
	{
		/*
		if(!pAdminUsername.equals("Admin"))
		{
			log.info("Error Getting Player Status : Incorrect Administrator Username");
			return "Error Getting Player Status : Incorrect Administrator Username";
		}
		if(!pAdminPassword.equals("Admin"))
		{
			log.info("Error Getting Player Status : Incorrect Administrator Password");
			return "Error Getting Player Status : Incorrect Administrator Password";
		}
		if(!validate(pIPAddress))
		{
			log.info("Error Getting Player Status : Invalid IP-address");
			return "Error Getting Player Status : Invalid IP-address";
		}
		try {
			// Create a Datagram Socket and bind it to a local port
			DatagramSocket datagramSocket = new DatagramSocket();
			// Place data in byte array
			String data;
			byte [] message;
			InetAddress host = InetAddress.getByName("localhost");
			DatagramPacket request1;
			DatagramPacket request2;
			DatagramPacket reply1;
			DatagramPacket reply2;
			// Create a Datagram Packet to send the request to the server
			if(aUDPPort == Parameters.UDPportNA)
			{
				data = "NA";
				message = data.getBytes();
				request1 = new DatagramPacket(message, data.length(), host, Parameters.UDPportEU);
				request2 = new DatagramPacket(message, data.length(), host, Parameters.UDPportAS);
			}
			else if(aUDPPort == Parameters.UDPportEU)
			{
				data = "EU";
				message = data.getBytes();
				request1 = new DatagramPacket(message, data.length(), host, Parameters.UDPportNA);
				request2 = new DatagramPacket(message, data.length(), host, Parameters.UDPportAS);
			}
			else if(aUDPPort == Parameters.UDPportAS)
			{
				data = "AS";
				message = data.getBytes();
				request1 = new DatagramPacket(message, data.length(), host, Parameters.UDPportEU);
				request2 = new DatagramPacket(message, data.length(), host, Parameters.UDPportNA);
			}
			else
			{
				log.info("Error Getting Player Status : Invalid Port number");
				return "Error Getting Player Status : Invalid Port number" + " " + aUDPPort;
			}
			datagramSocket.send(request1);
			message = new byte [1000];
			reply1 = new DatagramPacket(message, message.length);
			datagramSocket.receive(reply1);
			datagramSocket.send(request2);
			message = new byte [1000];
			reply2 = new DatagramPacket(message, message.length);
			datagramSocket.receive(reply2);
			log.info("Get Player Status : " + aServerName + ": " + getNumberOfOnlinePlayer() + " online, " + getNumberOfOfflinePlayer() + 
					" offline. \n" + new String(reply1.getData()) + "\n" + new String(reply2.getData()));
			return "Get Player Status : " + aServerName + ": " + getNumberOfOnlinePlayer() + " online, " + getNumberOfOfflinePlayer() + 
					" offline. \n" + new String(reply1.getData()) + "\n" + new String(reply2.getData());
			
		} catch (SocketException e) {
			System.out.println("SocketException : " + e.getMessage());
		} catch (IOException e) {
			System.out.println("IOException : " + e.getMessage());
		}
		
		log.info("Error Getting Player Status : Socket Excpetion");
		return "Error Getting Player Status : Socket Excpetion";
		*/
		return "getPlayerStatus";
	}
	
	/**
	 * This method when invoked from a AdministratorClient will suspend the player account given
	 * @param pAdminUsername by default all administrators have username "Admin"
	 * @param pAdminPassword by default all administrators have password "Admin"
	 * @param pIPAddress 132.xxx.xxx.xxx for NA, 93.xxx.xxx.xxx for EU, 182.xxx.xxx.xxx for AS
	 * @param pUsernameToSuspend a minimum length of 6 characters and a maximum length of 15 characters
	 * @return Confirmation in form of a string
	 */
	public String suspendAccount(String pAdminUsername, String pAdminPassword, String pIPAddress, String pUsernameToSuspend) 
	{
/*		if(!pAdminUsername.equals("Admin"))
		{
			log.info("Error Suspending Account : Incorrect Administrator Username");
			return "Error Suspending Account : Incorrect Administrator Username";
		}
		if(!pAdminPassword.equals("Admin"))
		{
			log.info("Error Suspending Account : Incorrect Administrator Password");
			return "Error Suspending Account : Incorrect Administrator Password";
		}
		if(!validate(pIPAddress))
		{
			log.info("Error Suspending Account : Invalid IP-address");
			return "Error Suspending Account : Invalid IP-address";
		}
		if((pUsernameToSuspend.charAt(0) > 'Z' && pUsernameToSuspend.charAt(0) < 'a') || pUsernameToSuspend.charAt(0) < 'A' || pUsernameToSuspend.charAt(0) > 'z')
		{
			log.info("Error Suspending Account : Username cannot start with " + pUsernameToSuspend.charAt(0));
			return "Error Suspending Account : Username cannot start with " + pUsernameToSuspend.charAt(0);
		}
		Account tmpAccount = getAccount(pUsernameToSuspend);
		if(tmpAccount == null)
		{
			log.info("Error Suspending Account : Username Was Not Found");
			tmpAccount = null;
			return "Error Suspending Account : Username Was Not Found";
		}
		
		boolean bSuccess = false;
		synchronized(this)
		{
			bSuccess = database.get(String.valueOf(pUsernameToSuspend.toUpperCase().charAt(0))).remove(tmpAccount);
		}
		if(bSuccess)
		{
			log.info("Player Account suspended :\nUsername \"" +  pUsernameToSuspend +  "\", Password \"" + tmpAccount.getPassword() + "\", IP-address \"" + tmpAccount.getIPAddress() + "\"");
			return "Player Account suspended :\nUsername \"" +  pUsernameToSuspend +  "\", Password \"" + tmpAccount.getPassword() + "\", IP-address \"" + tmpAccount.getIPAddress() + "\"\n";
		}
		else
		{
			log.info("Error Suspending Account : suspension faild");
			return "Error Suspending Account : suspension faild";
		}*/
		return "suspendAccount";
	}
	
	// returns the number of current online players in this server
	private int getNumberOfOnlinePlayer()
	{
		List <Account> tmpList;
		int numberOfOnlinePlayers = 0;
		for(char alphabet = 'A'; alphabet <= 'Z'; alphabet++)
		{
			tmpList = database.get(alphabet+"");
			for (int index = 0; index < tmpList.size(); index++)
				if(tmpList.get(index).isOnline())
					numberOfOnlinePlayers++;
		}
		return numberOfOnlinePlayers;
	}
	
	// returns the number of current offline players in this server
	private int getNumberOfOfflinePlayer()
	{
		List <Account> tmpList;
		int numberOfOfflinePlayers = 0;
		for(char alphabet = 'A'; alphabet <= 'Z'; alphabet++)
		{
			tmpList = database.get(alphabet+"");
			for (int index = 0; index < tmpList.size(); index++)
				if(!tmpList.get(index).isOnline())
					numberOfOfflinePlayers++;
		}
		return numberOfOfflinePlayers;
	}
	
	// Returns the account with the given pUsername, returns null if pUsername does not exist
	private Account getAccount(String pUsername)
	{
		String tmpUpperCaseUsername = pUsername.toUpperCase();
		List <Account> tmpList = database.get(String.valueOf(tmpUpperCaseUsername.charAt(0)));
		for (int index = 0; index < tmpList.size(); index++)
		{
			if(tmpList.get(index).getUserName().equals(pUsername))
			{
				tmpUpperCaseUsername = null;
				return tmpList.get(index);
			}
		}
		tmpUpperCaseUsername = null;
		tmpList = null;
		return null;
	}
	
	// Checks if the given pUsername exists in the database
	private boolean IPAddressExists(String pIPAddress)
	{
		List <Account> tmpList;
		for(char alphabet = 'A'; alphabet <= 'Z'; alphabet++)
		{
			tmpList = database.get(alphabet+"");
			for (int index = 0; index < tmpList.size(); index++)
			{
				if(tmpList.get(index).getIPAddress().equals(pIPAddress))
				{
					tmpList = null;
					return true;
				}
			}
		}
		tmpList = null;
		return false;
	}
	
	// Checks for the validity of the given pIPAddress
	private static boolean validate(final String pIPAddress) 
	{          
	      Pattern pattern = Pattern.compile(Parameters.PATTERN_FOR_IPADDRESS_VALIDATION);
	      Matcher matcher = pattern.matcher(pIPAddress);
	      pattern = null;
	      return matcher.matches();             
	}
}